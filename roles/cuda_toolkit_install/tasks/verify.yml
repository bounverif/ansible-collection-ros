# Manually Verify Supported Version of Linux and Verify Correct Kernel Headers and
# Development Packages at https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html

# Verify gcc
- name: Verify gcc
  ansible.builtin.shell:
    "command -v gcc >/dev/null 2>&1"
  register: gcc_command
  changed_when: false
  ignore_errors: true

- name: 'Check gcc installed'
  ansible.builtin.fail:
    msg: "gcc should be installed"
  when: "gcc_command.failed"

# Verify CUDA-capable GPU (checks for only existence of GPU. Spesific GPUs can be checked at https://developer.nvidia.com/cuda-gpus)
- name: Verify lspci
  ansible.builtin.shell:
    "command -v lspci >/dev/null 2>&1"
  register: lspci_command
  changed_when: false
  ignore_errors: true

- name: Install pciutils for Debian
  become: true
  ansible.builtin.apt:
    force_apt_get: true
    name: pciutils
  when: lspci_command.failed and hostvars[inventory_hostname].ansible_os_family == "Debian"

- name: Install pciutils for OpenSuse
  become: true
  zypper: # noqa: fqcn[action]
    name: pciutils
    state: present
  when: lspci_command.failed and hostvars[inventory_hostname].ansible_os_family == "Suse"

- name: Get NVIDIA-DEVICES
  ansible.builtin.shell:
    "set -o pipefail && lspci | grep -i nvidia"
  args:
    executable: bash
  changed_when: false
  register: nvidia_devices

- name: 'Check any available NVIDIA-DEVICE'
  ansible.builtin.fail:
    msg: "There should be available NVIDIA-DEVICE"
  when: " nvidia_devices == '' "

- name: Assign cuda_toolkit_install_verify_system variable
  ansible.builtin.set_fact:
    cuda_toolkit_install_verify_system: "{{ nvidia_devices != '' and not gcc_command.failed }}"
